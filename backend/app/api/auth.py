from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
import hashlib
import hmac
import json
from urllib.parse import unquote
import os
import logging

from ..database import get_db
from ..models.user import User, UserRole
from ..config.admins import is_allowed_user, get_user_role, ALLOWED_USERS
from ..utils.dependencies import create_access_token, ACCESS_TOKEN_EXPIRE_MINUTES
from ..schemas.user import UserResponse, TelegramAuthData

router = APIRouter()
logger = logging.getLogger(__name__)

# –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º production –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ENVIRONMENT = os.getenv("ENVIRONMENT", "production")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")

# –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
logger.info(f"üîê Security Configuration:")
logger.info(f"   Environment: {ENVIRONMENT}")
logger.info(f"   Bot Token: {'SET' if TELEGRAM_BOT_TOKEN else 'NOT SET'}")
logger.info(f"   Allowed Users Count: {len(ALLOWED_USERS)}")
logger.info(f"   Allowed IDs: {ALLOWED_USERS}")


def verify_telegram_auth(init_data: str) -> dict:
    """
    –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –æ—Ç Telegram.
    –ë–ï–ó –û–ë–•–û–î–û–í, –ë–ï–ó –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô!
    """
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå CRITICAL: TELEGRAM_BOT_TOKEN not configured!")
        raise HTTPException(
            status_code=status.HTTP_503_SERVICE_UNAVAILABLE,
            detail="Server configuration error. Contact administrator."
        )

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ init_data –Ω–µ –ø—É—Å—Ç–∞—è
    if not init_data or init_data == "undefined" or init_data == "null":
        logger.error("‚ùå Empty or invalid init_data received")
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid authentication data"
        )

    try:
        # –®–∞–≥ 3: –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
        parsed_data = {}
        for part in init_data.split('&'):
            if '=' not in part:
                continue
            key, value = part.split('=', 1)
            parsed_data[key] = unquote(value)

        # –®–∞–≥ 4: –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ö–µ—à
        received_hash = parsed_data.pop('hash', '')
        if not received_hash:
            logger.error("‚ùå No hash in init_data")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Missing authentication hash"
            )

        # –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        data_check_string = '\n'.join([
            f"{k}={v}" for k, v in sorted(parsed_data.items())
        ])

        # –®–∞–≥ 6: –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–µ—à
        secret_key = hmac.new(
            b"WebAppData",
            TELEGRAM_BOT_TOKEN.encode(),
            hashlib.sha256
        ).digest()

        calculated_hash = hmac.new(
            secret_key,
            data_check_string.encode(),
            hashlib.sha256
        ).hexdigest()

        # –®–∞–≥ 7: –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ö–µ—à–∏
        if calculated_hash != received_hash:
            logger.error(f"‚ùå Hash mismatch!")
            logger.error(f"   Expected: {calculated_hash[:20]}...")
            logger.error(f"   Received: {received_hash[:20]}...")
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid authentication signature"
            )

        # –®–∞–≥ 8: –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_json = parsed_data.get('user', '{}')
        user_data = json.loads(user_json)

        if not user_data or not user_data.get('id'):
            logger.error("‚ùå No user data in init_data")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="User data not found"
            )

        logger.info(f"‚úÖ Signature verified for user ID: {user_data.get('id')}")
        return {"user": user_data}

    except HTTPException:
        # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        raise
    except Exception as e:
        # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        logger.error(f"‚ùå Critical error in verify_telegram_auth: {e}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Authentication verification failed"
        )


@router.post("/telegram", response_model=dict)
async def telegram_auth(
        auth_data: TelegramAuthData,
        db: Session = Depends(get_db)
):
    """Authenticate user via Telegram WebApp"""

    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –ª–æ–≥–∏ –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
    print("=" * 60)
    print("[AUTH] New authentication attempt")
    print(f"[AUTH] Received initData length: {len(auth_data.initData) if auth_data.initData else 0}")

    try:
        # Verify Telegram auth data
        verified_data = verify_telegram_auth(auth_data.initData)
        user_data = verified_data.get("user", {})

        telegram_id = user_data.get("id")
        print(f"[AUTH] Extracted Telegram ID: {telegram_id} (type: {type(telegram_id)})")

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        if isinstance(telegram_id, str):
            telegram_id = int(telegram_id)
            print(f"[AUTH] Converted to int: {telegram_id}")

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
        print(f"[AUTH] Checking access for ID: {telegram_id}")
        print(f"[AUTH] Current ALLOWED_USERS: {ALLOWED_USERS}")

        if not is_allowed_user(telegram_id):
            print(f"[AUTH] ‚ùå ACCESS DENIED - ID {telegram_id} not in whitelist")
            print("=" * 60)

            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail=f"Access denied for Telegram ID {telegram_id}"
            )

        print(f"[AUTH] ‚úÖ ACCESS GRANTED for ID {telegram_id}")
        print("=" * 60)

        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
@router.post("/telegram", response_model=dict)
async def telegram_auth(
        auth_data: TelegramAuthData,
        db: Session = Depends(get_db)
):
    """
    –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram WebApp.
    –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê WHITELIST!
    """
    logger.info("=" * 50)
    logger.info("üîê New authentication attempt")
    logger.info(f"   Environment: {ENVIRONMENT}")
    logger.info(f"   Whitelist size: {len(ALLOWED_USERS)}")

    try:
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å Telegram
        logger.info("Step 1: Verifying Telegram signature...")
        verified_data = verify_telegram_auth(auth_data.initData)
        user_data = verified_data.get("user", {})

        # –®–∞–≥ 2: –ü–æ–ª—É—á–∞–µ–º Telegram ID
        telegram_id = user_data.get("id")
        if not telegram_id:
            logger.error("‚ùå No telegram_id in user data")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Invalid user data: missing Telegram ID"
            )

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        try:
            telegram_id = int(telegram_id)
        except (ValueError, TypeError):
            logger.error(f"‚ùå Invalid telegram_id format: {telegram_id}")
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Invalid Telegram ID format"
            )

        # –®–∞–≥ 3: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê - WHITELIST
        logger.info(f"Step 2: Checking whitelist for ID: {telegram_id}")
        logger.info(f"   User: {user_data.get('first_name')} {user_data.get('last_name')}")
        logger.info(f"   Username: @{user_data.get('username', 'no_username')}")
        logger.info(f"   Allowed IDs: {ALLOWED_USERS}")

        # –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –ë–ï–ó –û–ë–•–û–î–û–í
        is_allowed = telegram_id in ALLOWED_USERS

        if not is_allowed:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            logger.warning("=" * 50)
            logger.warning("‚õî UNAUTHORIZED ACCESS ATTEMPT!")
            logger.warning(f"   Telegram ID: {telegram_id}")
            logger.warning(f"   Name: {user_data.get('first_name')} {user_data.get('last_name')}")
            logger.warning(f"   Username: @{user_data.get('username', 'no_username')}")
            logger.warning(f"   Time: {datetime.now()}")
            logger.warning(f"   This ID is NOT in whitelist: {ALLOWED_USERS}")
            logger.warning("=" * 50)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ç–∫—É—é –æ—à–∏–±–∫—É
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail={
                    "error": "ACCESS_DENIED",
                    "message": "Sizning Telegram ID ruxsat berilmagan",
                    "telegram_id": telegram_id,
                    "username": user_data.get('username'),
                    "instruction": "Administrator bilan bog'laning: @Oqtosh_Soy"
                }
            )

        # –®–∞–≥ 4: –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω - —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"‚úÖ Access GRANTED for Telegram ID: {telegram_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == telegram_id).first()

        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_role_str = get_user_role(telegram_id)
            role_map = {
                "super_admin": UserRole.SUPER_ADMIN,
                "admin": UserRole.ADMIN,
                "manager": UserRole.MANAGER,
                "operator": UserRole.OPERATOR,
                "user": UserRole.USER
            }

            role = role_map.get(user_role_str, UserRole.USER)

            user = User(
                telegram_id=telegram_id,
                first_name=user_data.get("first_name", ""),
                last_name=user_data.get("last_name", ""),
                username=user_data.get("username", ""),
                role=role,
                is_admin=role in [UserRole.SUPER_ADMIN, UserRole.ADMIN],
                is_active=True
            )
            db.add(user)
            db.commit()
            db.refresh(user)
            logger.info(f"Created new user with role: {role.value}")
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            user.first_name = user_data.get("first_name", user.first_name)
            user.last_name = user_data.get("last_name", user.last_name)
            user.username = user_data.get("username", user.username)
            db.commit()
            logger.info(f"Updated existing user with role: {user.role.value}")

        # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω
        access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = create_access_token(
            data={"user_id": user.id},
            expires_delta=access_token_expires
        )

        logger.info(f"‚úÖ Authentication successful for {user.username}")
        logger.info("=" * 50)

        return {
            "token": access_token,
            "token_type": "bearer",
            "user": {
                "id": user.id,
                "telegram_id": user.telegram_id,
                "first_name": user.first_name,
                "last_name": user.last_name,
                "username": user.username,
                "is_admin": user.is_admin,
                "role": user.role.value
            }
        }

    except HTTPException:
        # HTTP –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        raise
    except Exception as e:
        # –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º –∏ –±–ª–æ–∫–∏—Ä—É–µ–º
        logger.error(f"‚ùå Critical authentication error: {e}")
        logger.error("=" * 50)

        # –ù–ï –î–ê–ï–ú –ù–ò–ö–ê–ö–ò–• –û–ë–•–û–î–û–í!
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Authentication failed. Contact administrator."
        )


@router.get("/me", response_model=UserResponse)
async def get_current_user_info(
        current_user: User = Depends(get_current_user)
):
    """Get current user info"""
    return current_user
